Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera WorksheetThis is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.Part 1: Yelp Dataset Profiling and Understanding1. Profile the data by finding the total number of records for each of the tables below:	i. Attribute table = 10,000ii. Business table = 10,000iii. Category table = 10,000iv. Checkin table = 10,000v. elite_years table = 10,000vi. friend table = 10,000vii. hours table = 10,000viii. photo table = 10,000ix. review table = 10,000x. tip table = 10,000xi. user table = 10,000	2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.i. Business = 10,000ii. Hours = 1,562iii. Category = 2,643iv. Attribute = 1,115v. Review = 8,090 for business_id; 9,581 for user_idvi. Checkin = 493vii. Photo = 10,000viii. Tip = 537 for user_id; 3,979 for business_idix. User = 10,000x. Friend = 11xi. Elite_years = 2,780Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	3. Are there any columns with null values in the Users table? Indicate "yes," or "no."	Answer: No			SQL code used to arrive at answer:		SELECT *FROM userWHERE id IS NULLOR name IS NULLOR review_count IS NULLOR yelping_since IS NULLOR useful IS NULLOR funny IS NULLOR cool IS NULLOR fans IS NULLOR average_stars IS NULLOR compliment_hot IS NULLOR compliment_more IS NULLOR compliment_profile IS NULLOR compliment_cute IS NULLOR compliment_list IS NULLOR compliment_note IS NULLOR compliment_plain IS NULLOR compliment_cool IS NULLOR compliment_funny IS NULLOR compliment_writer IS NULLOR compliment_photos IS NULL;	4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:	i. Table: Review, Column: Stars			min:	1	max:	 5	avg: 3.7082				ii. Table: Business, Column: Stars			min:	1	max:	 5	avg: 3.6549				iii. Table: Tip, Column: Likes			min:	0	max:	 2	avg: 0.0144				iv. Table: Checkin, Column: Count			min:	1	max:	 53	avg: 1.9414				v. Table: User, Column: Review_count			min:	0	max:	 2000	avg: 24.2995		5. List the cities with the most reviews in descending order:	SQL code used to arrive at answer:		SELECT city	,SUM(review_count) AS totalreviews	FROM business	GROUP BY city	ORDER BY totalreviews DESC;	Copy and Paste the Result Below:	+-----------------+--------------+| city            | totalreviews |+-----------------+--------------+| Las Vegas       |        82854 || Phoenix         |        34503 || Toronto         |        24113 || Scottsdale      |        20614 || Charlotte       |        12523 || Henderson       |        10871 || Tempe           |        10504 || Pittsburgh      |         9798 || Montréal        |         9448 || Chandler        |         8112 || Mesa            |         6875 || Gilbert         |         6380 || Cleveland       |         5593 || Madison         |         5265 || Glendale        |         4406 || Mississauga     |         3814 || Edinburgh       |         2792 || Peoria          |         2624 || North Las Vegas |         2438 || Markham         |         2352 || Champaign       |         2029 || Stuttgart       |         1849 || Surprise        |         1520 || Lakewood        |         1465 || Goodyear        |         1155 |+-----------------+--------------+(Output limit exceeded, 25 of 362 total rows shown)	6. Find the distribution of star ratings to the business in the following cities:i. AvonSQL code used to arrive at answer:SELECT stars,SUM(review_count)FROM businessWHERE city = 'Avon'GROUP BY stars;Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):+-------+-------------------+| stars | SUM(review_count) |+-------+-------------------+|   1.5 |                10 ||   2.5 |                 6 ||   3.5 |                88 ||   4.0 |                21 ||   4.5 |                31 ||   5.0 |                 3 |+-------+-------------------+ii. BeachwoodSQL code used to arrive at answer:SELECT stars,SUM(review_count)FROM businessWHERE city = 'Beachwood'GROUP BY stars;Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):		+-------+-------------------+| stars | SUM(review_count) |+-------+-------------------+|   2.0 |                 8 ||   2.5 |                 3 ||   3.0 |                11 ||   3.5 |                 6 ||   4.0 |                69 ||   4.5 |                17 ||   5.0 |                23 |+-------+-------------------+7. Find the top 3 users based on their total number of reviews:			SQL code used to arrive at answer:	SELECT name,SUM(review_count)FROM userGROUP BY nameORDER BY SUM(review_count) DESCLIMIT 3;	Copy and Paste the Result Below:		+--------+-------------------+| name   | SUM(review_count) |+--------+-------------------+| Nicole |              2397 || Sara   |              2253 || Gerald |              2034 |+--------+-------------------+8. Does posing more reviews correlate with more fans?	Please explain your findings and interpretation of the results:	Posting more reviews does seem to be correlated with more fans. To examine this, I used CASE statements to create bins based on users’ number of reviews, and then compared the average number of fans for each bin. Average fans increased significantly as the number of reviews went up.	9. Are there more reviews with the word "love" or with the word "hate" in them?	Answer:	More “love” than “hate” (1780 vs. 232)		SQL code used to arrive at answer:SELECT COUNT(id)FROM reviewWHERE text LIKE '%love%';SELECT COUNT(id)FROM reviewWHERE text LIKE ‘%hate%’;	10. Find the top 10 users with the most fans:	SQL code used to arrive at answer:	SELECT name,SUM(fans)FROM userGROUP BY nameORDER BY SUM(fans) DESCLIMIT 10;	Copy and Paste the Result Below:	+-----------+-----------+| name      | SUM(fans) |+-----------+-----------+| Amy       |       519 || Mimi      |       498 || Harald    |       311 || Gerald    |       256 || Lisa      |       207 || Nicole    |       200 || Christine |       187 || Mark      |       156 || Jen       |       148 || Linda     |       148 |+-----------+-----------+		Part 2: Inferences and Analysis1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.	I looked at businesses in Phoenix.i. Do the two groups you chose to analyze have a different distribution of hours?I did not see a difference in the distribution of hours between the two groups, however most of the businesses in Phoenix did not have hours data in the database.ii. Do the two groups you chose to analyze have a different number of reviews? Phoenix business with 4-5 stars had 19,848 reviews total, and those with 2-3 stars had 14,061.         iii. Are you able to infer anything from the location data provided between these two groups? Explain.The postal code with the highest number of 4-5 star reviews was 85016. The postal code with the highest number of 2-3 star reviews was 85032.SQL code used for analysis:SELECT b.id AS b_id,h.business_id AS hrs_bizid,b.name,b.city,b.stars,h.hours,CASE    WHEN b.stars < 2 THEN 'Less than 2 stars'    WHEN b.stars >= 4 THEN '4-5 stars'    ELSE '2-3 stars'END AS StarbinsFROM business b  INNER JOIN hours h ON b.id = h.business_idWHERE b.city = 'Phoenix'AND Starbins = '2-3 stars'ORDER BY Starbins;SELECT city,sum(review_count),CASE    WHEN stars < 2 THEN 'Less than 2 stars'    WHEN stars >= 4 THEN '4-5 stars'    ELSE '2-3 stars'END AS StarbinsFROM business  WHERE city = 'Phoenix'GROUP BY Starbins;SELECT postal_code,count(id) AS countbyzip,CASE    WHEN stars < 2 THEN 'Less than 2 stars'    WHEN stars >= 4 THEN '4-5 stars'    ELSE '2-3 stars'END AS StarbinsFROM business  WHERE city = 'Phoenix'GROUP BY Starbins, postal_codeORDER BY countbyzip DESC;				2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.		i. Difference 1:         Average stars for Phoenix business that were open were slightly higher than the average for those that were closed (3.66 vs. 3.55).        ii. Difference 2:          Business that were open had a higher average review count (35.6 reviews) compared to closed businesses (28 reviews).                SQL code used for analysis:SELECT is_open,avg(stars),count(id),sum(review_count),avg(review_count)FROM businessWHERE city = 'Phoenix'GROUP BY is_open;		3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:	i. Indicate the type of analysis you chose to do:         I analyzed whether there was a correlation between a user’s number of reviews and average stars.     ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:  For this analysis, I needed data on review counts and average stars per user. I also needed to create bins to group users by their review counts.                                          iii. Output of your finished dataset:I found no correlation between users’ number of reviews and average stars.      +-------------------------+------------------------------+| reviewcountbins         | ROUND(avg(average_stars), 2) |+-------------------------+------------------------------+| 8:500 or more reviews   |                         3.74 || 7:400 to 499 reviews    |                         3.68 || 6:300 to 399 reviews    |                         3.72 || 5:200 to 299 reviews    |                         3.77 || 4:100 to 199 reviews    |                         3.77 || 3:50 to 99 reviews      |                         3.75 || 2:25 to 49 reviews      |                         3.78 || 1:Fewer than 25 reviews |                         3.68 || 0:No reviews            |                         3.89 |+-------------------------+------------------------------+            iv. Provide the SQL code you used to create your final dataset:SELECT CASE    WHEN review_count = 0 THEN '0:No reviews'    WHEN review_count < 25 THEN '1:Fewer than 25 reviews'    WHEN review_count >= 25 AND review_count < 50 THEN '2:25 to 49 reviews'    WHEN review_count >= 50 AND review_count < 100 THEN '3:50 to 99 reviews'    WHEN review_count >= 100 AND review_count < 200 THEN '4:100 to 199 reviews'    WHEN review_count >= 200 AND review_count < 300 THEN '5:200 to 299 reviews'    WHEN review_count >= 300 AND review_count < 400 THEN '6:300 to 399 reviews'    WHEN review_count >= 400 AND review_count < 500 THEN '7:400 to 499 reviews'    WHEN review_count >= 500 THEN '8:500 or more reviews'    ELSE 'other'END AS reviewcountbins,ROUND(avg(average_stars), 2)FROM userGROUP BY reviewcountbinsORDER BY reviewcountbins DESC;